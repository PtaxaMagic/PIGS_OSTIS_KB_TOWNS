function proc_of_finding_actual_state(_object, _time_point) {
  return _answer;
  generate([assign, node, constant, _answer]);
  generate(_answer, [pos_const_perm, assign, _arc], _object);
  generate([assign, node, constant, _arcs]);
  search(
    _object,
    [assign, _arc],
    [assign, constant, _element],
    [], _arcs, []
  );
  search(
    [assign, constant, _element],
    [assign, _arc],
    _object,
    [], _arcs, []
  );
  if (_arcs) 
    while(search(_arcs, [assign, _i], [assign, _arc])) {
      proc_of_checking_arc_in_time(_arc, _time_point, [assign, _status]);
      if (_status)
        proc_of_adding_to_contour(_answer, _arc, _object); 
      erase([erase, _i]);
    }
}

function proc_of_checking_arc_in_time(_arc, _time_point) {
  return _status;
  proc_of_finding_start_time_of_arc(_arc, [assign, _start_time]);
  proc_of_finding_finish_time_of_arc(_arc, [assign, _finish_time]);
  if (_start_time)
    proc_of_compare_time_points(_time_point, _start_time, [assign, _max]);
  else var_assign([assign, _max], _time_point);
  if (_finish_time)
    proc_of_compare_time_points(_time_point, _finish_time, [assign, _min]);
  else var_assign([assign, _min], _time_point);
  if (is(_time_point, _max))
    if (is(_time_point, _min))  
      var_assign([assign, _status], sc_true);
}



function proc_of_finding_start_time_of_arc(_arc) {
  return _time_point;
  sys_search(
    start_time_pattern,
    [assign, _results],
    start_time_params, []
  );
  if (_results) {
    search(_results, [assign, pos_const_perm, _tmp_arc], [assign, _result]);
    search(
      [scp_constant, _target_time], 
      [assign, common, constant, _tmp_arc1], 
      [assign, _time_point], 
      [assign, pos_const_perm, _tmp_arc2],
      _result
    );
  }
}

/*scs
  start_time_pattern = [*
    _situation _-> _target_arc;;
    concept_situation _-> _situation;;
    _situation _=> nrel_start_time:: _target_time;;
  *];;
  start_time_params -> ... (*
    -> rrel_1: rrel_fixed: rrel_scp_const: _target_arc;;
    -> rrel_2: rrel_fixed: rrel_scp_var: _arc;;
  *);;
scs*/


function proc_of_finding_finish_time_of_arc(_arc) {
  return _time_point;
  sys_search(
    finish_time_pattern,
    [assign, _results],
    finish_time_params, []
  );
  if (_results) {
    search(_results, [assign, pos_const_perm, _tmp_arc], [assign, _result]);
    search(
      [scp_constant, _target_time], 
      [assign, common, constant, _tmp_arc1], 
      [assign, _time_point], 
      [assign, pos_const_perm, _tmp_arc2],
      _result
    );
  }
}

/*scs
  finish_time_pattern = [*
    _situation _-> _target_arc;;
    concept_situation _-> _situation;;
    _situation _=> nrel_finish_time:: _target_time;;
  *];;
  finish_time_params -> ... (*
    -> rrel_1: rrel_fixed: rrel_scp_const: _target_arc;;
    -> rrel_2: rrel_fixed: rrel_scp_var: _arc;;
  *);;
scs*/


function proc_of_adding_to_contour(_answer, _arc, _object) {
  search([assign, _object1], _arc, [assign, _object2]);
  if (is(_object, _object1))
    generate(_answer, [assign, pos_const_perm, _tmp_arc], _object2);
  else
    generate(_answer, [assign, pos_const_perm, _tmp_arc], _object1);
  generate(_answer, [assign, pos_const_perm, _tmp_arc], _arc);
}
